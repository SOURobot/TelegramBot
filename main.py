import telebot

from responses import *
from parser import *

from time import sleep
from telebot import types

bot = telebot.TeleBot('6291281713:AAHrleKYDcmcciulEkQINb1XQcaSiCFfvcA')

reqs = {}


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "yes":
        answer = get_html(reqs)
        if answer:
            pass
        else:
            bot.send_message(call.message.chat.id, '–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    elif call.data == "no":
        bot.send_message(call.message.chat.id, '–ü–æ–∫–∞ –Ω–∏—á–µ–º –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å')


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    msg = message.text
    if message.text == "/start":
        global airport, airline, time, duration, cost
        airport = ""
        airline = ""
        time = ""
        duration = ""
        cost = ""
        bot.send_message(message.from_user.id, ans(msg))
    elif message.text == "/help":
        bot.send_message(message.from_user.id, ans(msg))
    elif message.text == "/search":
        bot.send_message(message.from_user.id, ans(msg))
        sleep(4.0)
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç üèõ\n–ü—Ä–∏–º–µ—Ä: –í–Ω—É–∫–æ–≤–æ')
        bot.register_next_step_handler(message, get_airport)
    else:
        bot.send_message(message.from_user.id, ans(message.text))


def get_airport(message):
    reqs["airport"] = message.text
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—é ‚úà\n–ü—Ä–∏–º–µ—Ä: –ê—ç—Ä–æ—Ñ–ª–æ—Ç')
    bot.register_next_step_handler(message, get_airline)


def get_airline(message):
    reqs["airline"] = message.text
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞ üï§\n–ü—Ä–∏–º–µ—Ä: —É—Ç—Ä–æ')
    bot.register_next_step_handler(message, get_time)


def get_time(message):
    reqs["time"] = message.text
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –≤ —á–∞—Å–∞—Ö ‚è≥\n–ü—Ä–∏–º–µ—Ä: 3')
    bot.register_next_step_handler(message, get_duration)


def get_duration(message):
    reqs["duration"] = message.text
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö üíµ\n–ü—Ä–∏–º–µ—Ä: 3000')
    bot.register_next_step_handler(message, get_cost)


def get_cost(message):
    cost = 0
    while cost == 0:
        try:
            cost = int(message.text)
            reqs["cost"] = cost
        except Exception:
            bot.send_message(message.from_user.id, '‚ö† –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')

    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text='–ò—Å–∫–∞—Ç—å üîç', callback_data='yes')
    keyboard.add(key_yes)
    key_no = types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚úè', callback_data='no')
    keyboard.add(key_no)
    question = f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üëá\n–ê—ç—Ä–æ–ø–æ—Ä—Ç üèõ: {reqs['airport']}\n–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è ‚úà: {reqs['airline']}\n –í—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞ üï§: {reqs['time']}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚è≥: –¥–æ {reqs['duration']}\n–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–æ–≤ üíµ: –¥–æ {reqs['cost']}"

    bot.send_message(message.from_user.id, question)


bot.polling(none_stop=True, interval=0)