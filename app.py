import logging
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup

BOT_TOKEN = "6291281713:AAHrleKYDcmcciulEkQINb1XQcaSiCFfvcA"

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)


reply_keyboard = [['/start', '/help'], ['/search', '/stop']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

params = {}


async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç Cheap & Daily –∏ —è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç.\n–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å—Å—è –∏–∑ –ú–æ—Å–∫–≤—ã –∏ –∫—É–¥–∞-–Ω–∏–±—É–¥—å —Å–ª–µ—Ç–∞—Ç—å? –¢–æ–≥–¥–∞ –≤–∞–º –∫–æ –º–Ω–µ! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –±–∏–ª–µ—Ç—ã, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ –≤–∞—à–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º.\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω–µ–º?\n–¢–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–π—Ç–µ /search –∏ –ø–æ–µ—Ö–∞–ª–∏!\nP.S. –ù–µ –∑–Ω–∞–µ—Ç–µ, –∫–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ—á–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.", reply_markup=markup)


async def help(update, context):
    await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ —è –Ω–µ –º–æ–≥—É –≤–∞–º –Ω–∏ —á–µ–º –ø–æ–º–æ—á—å.")


async def search(update, context):
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ /tips –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –ø–æ–∏—Å–∫—É\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /go –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")


async def tips(update, context):
    await update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–ù–∞–∂–º–∏—Ç–µ /go –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")


async def go(update, context):
    global params
    params = {}
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç üèõ\n–ü—Ä–∏–º–µ—Ä: –í–Ω—É–∫–æ–≤–æ")
    #check
    return 1


async def first_r(update, context):
    params["airport"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å? üìã\n–ü—Ä–∏–º–µ—Ä: 5")
    #check
    return 2


async def second_r(update, context):
    params["amount"] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞ üï§\n–ü—Ä–∏–º–µ—Ä: –ø–æ—Å–ª–µ 18")
    # check
    return 3


async def third_r(update, context):
    params["time"] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –≤ —á–∞—Å–∞—Ö ‚è≥\n–ü—Ä–∏–º–µ—Ä: 3")
    # check
    return 4


async def fourth_r(update, context):
    params["duration"] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö üíµ\n–ü—Ä–∏–º–µ—Ä: 3000")
    # check
    return 5


async def fifth_r(update, context):
    params["cost"] = update.message.text
    await update.message.reply_text(f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üëá\n–ê—ç—Ä–æ–ø–æ—Ä—Ç üèõ: {params['airport']}\n–ë—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {params['amount']}\n–í—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞ üï§: {params['time']}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚è≥: –¥–æ {params['duration']}\n–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–æ–≤ üíµ: –¥–æ {params['cost']}")
    # add buttons
    return ConversationHandler.END


async def stop(update, context):
    await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå")
    return ConversationHandler.END


def main():
    app = Application.builder().token(token=BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CommandHandler("tips", tips))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('go', go)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, first_r)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, second_r)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, third_r)],
            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, fourth_r)],
            5: [MessageHandler(filters.TEXT & ~filters.COMMAND, fifth_r)]
        },
        fallbacks=[CommandHandler('stop', stop)])

    app.add_handler(conv_handler)
    app.run_polling()


if __name__ == "__main__":
    main()